{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This project was started as a simple library to manage command-line arguments in php. After having it around in my toolbox for a while I decided to opensource the project for others to use as well. The project was initially based on the work of Joe Tannenbaum with his Climate package but changed over the years to be my own. Unit Tests \u00b6 If you wish to run any tests on this package you can run: $ ./vendor/bin/pest or $ ./vendor/bin/phpunit The MIT License (MIT) \u00b6 Copyright (c) 2020 Johnny Mast mastjohnny@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Github \u00b6 Project source code is hosted on GitHub .","title":"Introduction"},{"location":"#unit-tests","text":"If you wish to run any tests on this package you can run: $ ./vendor/bin/pest or $ ./vendor/bin/phpunit","title":"Unit Tests"},{"location":"#the-mit-license-mit","text":"Copyright (c) 2020 Johnny Mast mastjohnny@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"},{"location":"#github","text":"Project source code is hosted on GitHub .","title":"Github"},{"location":"about/","text":"Nelea si corpora sole dictis adiecerit negate \u00b6 His suis nos aequora sinus oris gestu \u00b6 Lorem markdownum gemitus clarique velut priora vix! Quam acceptos erat saxa leves natae et viscera cardine, natus. Que captatur et quid stat agitavit melioris undis. Quem dixit fugiunt habet Solumque catulo Oculos dea vultus incognita heros paene rapidisque Ego caelestes cereris iacent Inhaesit orbem Pactolonque quae Cultu condita \u00b6 Iuvabat aethere est pars, nec non nemus tunc freta repens, non et quibus missus cecinisse in. Vicisse dumque fecerit reseret, diu fuit iunguntur tum. Petunt post fecit et mugitu olim transitus belli mensis ut idem Ide restabat carica. Primum intendens celeri cutem; funis Turnusque didicit: capiat habentia referat coercet fabrilis resilit: una? Et quietem coloribus digestum, et quae secuta modo mares mecum omnibus . if (backside_word) { partition += qwerty_engine_camelcase(romCompatibleDlc + 4, protocol, 5); sla_isp_speakers(duplexMtu, definition); } if (prebinding_file < engineGuid) { waisStation.server -= nybble_troubleshooting; favicon_socket_memory.passwordDesktop -= ldap; } if (parallel) { debug_mnemonic_software(2, virtualSsh / portal_tweak); } if (design * bankruptcy_slashdot_icq + error / computerBurnOdbc) { disk_ups.management.hackerCardScanner(property_sidebar_bar(gbpsDram, 30)); managementAiffPoint *= speakersFlaming; abend_moodle(-3, characterCadAddress, superscalarOcr - 1); } else { led_ddl_dns(sync); } sidebarAccess += stateSchema(850503 + ipodPort - cut); Illa sat parentem divitior est nec in \u00b6 Tempora quem hasta, e cetera colonis, sospes esse sorores quoque propiusque addit hiems illa respondent crinita. Tendere fontis et membra mare auditis herbis, iam uritur inclita; in. Proelia mare Ammon et est Tantale notissima \u00b6 Potuit gelidum quam dea quid invitae Methymnaeae numquam de suam conveniant angues. Mihi ferrum umbras vulgatum; ramo neque Achilles cultusque nubila nos undas haec. Imitabere Cipus: vide navita precor movet alti, cum suo exit missum dedit. Ipsa quae mutatus aut aera quantas tamen. Est viri, Epaphi adspicit in et ingenium viri gerunt molles, temptent et toto. Medium est, deus, aeno subduxit maiusque, ne unda ; tela. Primo puerile corpus; ventre sic innumeras adfatur tu teneret licuit, et sine. Hederae ipse \u00b6 Fuisti carmina adventus aurum inplerat putatur lammina quaedam, omnes quid illa tempus quaerebat precantia aeacides Inachus. At inimica prendere. Quoque imbre latices Neptunia exitus; mea ex torvis crevit, ire. Et procul rupit, vituli praerupta vincere potes setius Dardaniam medium pignora Hiberis. Cacumine ut protinus lyra! Famularia gradu idem lacrimantia aequore? Herculis et erat, quod sensim ut dolor fulmine; regia summa; pati dat domosque scintilla.","title":"Nelea si corpora sole dictis adiecerit negate"},{"location":"about/#nelea-si-corpora-sole-dictis-adiecerit-negate","text":"","title":"Nelea si corpora sole dictis adiecerit negate"},{"location":"about/#his-suis-nos-aequora-sinus-oris-gestu","text":"Lorem markdownum gemitus clarique velut priora vix! Quam acceptos erat saxa leves natae et viscera cardine, natus. Que captatur et quid stat agitavit melioris undis. Quem dixit fugiunt habet Solumque catulo Oculos dea vultus incognita heros paene rapidisque Ego caelestes cereris iacent Inhaesit orbem Pactolonque quae","title":"His suis nos aequora sinus oris gestu"},{"location":"about/#cultu-condita","text":"Iuvabat aethere est pars, nec non nemus tunc freta repens, non et quibus missus cecinisse in. Vicisse dumque fecerit reseret, diu fuit iunguntur tum. Petunt post fecit et mugitu olim transitus belli mensis ut idem Ide restabat carica. Primum intendens celeri cutem; funis Turnusque didicit: capiat habentia referat coercet fabrilis resilit: una? Et quietem coloribus digestum, et quae secuta modo mares mecum omnibus . if (backside_word) { partition += qwerty_engine_camelcase(romCompatibleDlc + 4, protocol, 5); sla_isp_speakers(duplexMtu, definition); } if (prebinding_file < engineGuid) { waisStation.server -= nybble_troubleshooting; favicon_socket_memory.passwordDesktop -= ldap; } if (parallel) { debug_mnemonic_software(2, virtualSsh / portal_tweak); } if (design * bankruptcy_slashdot_icq + error / computerBurnOdbc) { disk_ups.management.hackerCardScanner(property_sidebar_bar(gbpsDram, 30)); managementAiffPoint *= speakersFlaming; abend_moodle(-3, characterCadAddress, superscalarOcr - 1); } else { led_ddl_dns(sync); } sidebarAccess += stateSchema(850503 + ipodPort - cut);","title":"Cultu condita"},{"location":"about/#illa-sat-parentem-divitior-est-nec-in","text":"Tempora quem hasta, e cetera colonis, sospes esse sorores quoque propiusque addit hiems illa respondent crinita. Tendere fontis et membra mare auditis herbis, iam uritur inclita; in.","title":"Illa sat parentem divitior est nec in"},{"location":"about/#proelia-mare-ammon-et-est-tantale-notissima","text":"Potuit gelidum quam dea quid invitae Methymnaeae numquam de suam conveniant angues. Mihi ferrum umbras vulgatum; ramo neque Achilles cultusque nubila nos undas haec. Imitabere Cipus: vide navita precor movet alti, cum suo exit missum dedit. Ipsa quae mutatus aut aera quantas tamen. Est viri, Epaphi adspicit in et ingenium viri gerunt molles, temptent et toto. Medium est, deus, aeno subduxit maiusque, ne unda ; tela. Primo puerile corpus; ventre sic innumeras adfatur tu teneret licuit, et sine.","title":"Proelia mare Ammon et est Tantale notissima"},{"location":"about/#hederae-ipse","text":"Fuisti carmina adventus aurum inplerat putatur lammina quaedam, omnes quid illa tempus quaerebat precantia aeacides Inachus. At inimica prendere. Quoque imbre latices Neptunia exitus; mea ex torvis crevit, ire. Et procul rupit, vituli praerupta vincere potes setius Dardaniam medium pignora Hiberis. Cacumine ut protinus lyra! Famularia gradu idem lacrimantia aequore? Herculis et erat, quod sensim ut dolor fulmine; regia summa; pati dat domosque scintilla.","title":"Hederae ipse"},{"location":"author/","text":"Johnny Mast \u00b6 This package is created and maintained by Johnny Mast. For feature requests and suggestions you could consider emailing me or filling out an issue .","title":"Author"},{"location":"author/#johnny-mast","text":"This package is created and maintained by Johnny Mast. For feature requests and suggestions you could consider emailing me or filling out an issue .","title":"Johnny Mast"},{"location":"installation/","text":"Installation \u00b6 This package is available via composer: composer require redbox/cli Be aware of the requirements Redbox-cli requires PHP version 8.0 or above.","title":"Installation"},{"location":"installation/#installation","text":"This package is available via composer: composer require redbox/cli Be aware of the requirements Redbox-cli requires PHP version 8.0 or above.","title":"Installation"},{"location":"license/","text":"The MIT License (MIT) \u00b6 Copyright (c) 2020 Johnny Mast mastjohnny@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#the-mit-license-mit","text":"Copyright (c) 2020 Johnny Mast mastjohnny@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"},{"location":"arguments/introduction/","text":"Introduction \u00b6 The whole concept of arguments is divided into two subjects options and operations . Where operations could be custom actions like login or download they are not mandatory to add options to your application. Operations If you want to learn more about operations and how useful they can be follow this link . Let's start easy by just adding to your application. Adding options \u00b6 <?php use Redbox\\Cli\\Arguments\\Option ; use Redbox\\Cli\\Cli ; $cli = new Cli ; $cli -> arguments -> addOption ( 'user' , 'u' , Option :: OPTION_OPTIONAL , \"Username to log in with.\" , \"Default value here\" ); The code above will add an optional option. Option flags \u00b6 You can use the following option flags to make your options optional/required or a flag by using the no value type. Option::OPTION_REQUIRED Using this flag means the option is required. Option::OPTION_OPTIONAL Using this flag means this option is not required. Option::OPTION_NO_VALUE Using this flag means the option has no default value and is used as the initiator. Reading input \u00b6 In the example below we added the user parameter as described above. But we also add the parse() function that allows the package to parse what was passed to the application via the command line. The second call we added was to the get() function that allows you to read the value of the command line option. <?php /** * Run this example with argument -u=johnny */ use Redbox\\Cli\\Arguments\\Option ; use Redbox\\Cli\\Cli ; $cli = new Cli ; /** * This is optional. */ $cli -> setDescription ( \"Showcase of the usage function.\" ); /** * Add an option that we can show. */ $cli -> arguments -> addOption ( 'user' , 'u' , Option :: OPTION_OPTIONAL , \"Username to log in with.\" ); $cli -> arguments -> parse (); $user = $cli -> arguments -> get ( \"user\" ); echo \"You provided username { $user } \\n \" ; Usage screen \u00b6 When it comes to command-line arguments you also might want to show the available options to the users of your applications. Redbox-cli has a built-in function to do just that. You can use the usage() function to show the available options like so: <?php use Redbox\\Cli\\Arguments\\Option ; use Redbox\\Cli\\Cli ; $cli = new Cli ; /** * This is optional. */ $cli -> setDescription ( \"Showcase of the usage function.\" ); /** * Add an option that we can show. */ $cli -> arguments -> addOption ( 'user' , 'u' , Option :: OPTION_OPTIONAL , \"Username to log in with.\" ); $cli -> arguments -> usage (); You can add an optional description to your application. Use <?php $cli->setDescription(\"Showcase of the usage\"); to add the application description to use usage output. Outputs something like the following: usage.php - Showcase of the usage function . usage: usage.php default [ -u, --user = user ] Options: usage.php default -u, --User = User Username to log in with. Required options \u00b6 When options are required but not passed to the application you might want to show the users of your application the usage screen. This task is easy to accomplish as the package throws an Exception when a user fails to provide the value for a required argument. So putting this all together we end up with the following code. <?php /** * Run this example without any arguments. */ use Redbox\\Cli\\Arguments\\Option ; use Redbox\\Cli\\Cli ; $cli = new Cli ; try { /** * This is optional. */ $cli -> setDescription ( \"Showcase of required arguments.\" ); /** * Add an option that we can show. */ $cli -> arguments -> addOption ( 'user' , 'u' , Option :: OPTION_REQUIRED , \"Username to log in with.\" ); $cli -> arguments -> parse (); $user = $cli -> arguments -> get ( 'user' ); echo \"You provided username { $user } \\n \" ; } catch ( \\Exception ) { $cli -> arguments -> usage (); } If you run this example without any arguments an Exception will be thrown and the usage screen will be shown to the user of your application. Be aware of default values If you have provided a default value an exception will not be thrown if the option is missing. The default value will be used instead of the value a user would have passed in.","title":"Introduction"},{"location":"arguments/introduction/#introduction","text":"The whole concept of arguments is divided into two subjects options and operations . Where operations could be custom actions like login or download they are not mandatory to add options to your application. Operations If you want to learn more about operations and how useful they can be follow this link . Let's start easy by just adding to your application.","title":"Introduction"},{"location":"arguments/introduction/#adding-options","text":"<?php use Redbox\\Cli\\Arguments\\Option ; use Redbox\\Cli\\Cli ; $cli = new Cli ; $cli -> arguments -> addOption ( 'user' , 'u' , Option :: OPTION_OPTIONAL , \"Username to log in with.\" , \"Default value here\" ); The code above will add an optional option.","title":"Adding options"},{"location":"arguments/introduction/#option-flags","text":"You can use the following option flags to make your options optional/required or a flag by using the no value type. Option::OPTION_REQUIRED Using this flag means the option is required. Option::OPTION_OPTIONAL Using this flag means this option is not required. Option::OPTION_NO_VALUE Using this flag means the option has no default value and is used as the initiator.","title":"Option flags"},{"location":"arguments/introduction/#reading-input","text":"In the example below we added the user parameter as described above. But we also add the parse() function that allows the package to parse what was passed to the application via the command line. The second call we added was to the get() function that allows you to read the value of the command line option. <?php /** * Run this example with argument -u=johnny */ use Redbox\\Cli\\Arguments\\Option ; use Redbox\\Cli\\Cli ; $cli = new Cli ; /** * This is optional. */ $cli -> setDescription ( \"Showcase of the usage function.\" ); /** * Add an option that we can show. */ $cli -> arguments -> addOption ( 'user' , 'u' , Option :: OPTION_OPTIONAL , \"Username to log in with.\" ); $cli -> arguments -> parse (); $user = $cli -> arguments -> get ( \"user\" ); echo \"You provided username { $user } \\n \" ;","title":"Reading input"},{"location":"arguments/introduction/#usage-screen","text":"When it comes to command-line arguments you also might want to show the available options to the users of your applications. Redbox-cli has a built-in function to do just that. You can use the usage() function to show the available options like so: <?php use Redbox\\Cli\\Arguments\\Option ; use Redbox\\Cli\\Cli ; $cli = new Cli ; /** * This is optional. */ $cli -> setDescription ( \"Showcase of the usage function.\" ); /** * Add an option that we can show. */ $cli -> arguments -> addOption ( 'user' , 'u' , Option :: OPTION_OPTIONAL , \"Username to log in with.\" ); $cli -> arguments -> usage (); You can add an optional description to your application. Use <?php $cli->setDescription(\"Showcase of the usage\"); to add the application description to use usage output. Outputs something like the following: usage.php - Showcase of the usage function . usage: usage.php default [ -u, --user = user ] Options: usage.php default -u, --User = User Username to log in with.","title":"Usage screen"},{"location":"arguments/introduction/#required-options","text":"When options are required but not passed to the application you might want to show the users of your application the usage screen. This task is easy to accomplish as the package throws an Exception when a user fails to provide the value for a required argument. So putting this all together we end up with the following code. <?php /** * Run this example without any arguments. */ use Redbox\\Cli\\Arguments\\Option ; use Redbox\\Cli\\Cli ; $cli = new Cli ; try { /** * This is optional. */ $cli -> setDescription ( \"Showcase of required arguments.\" ); /** * Add an option that we can show. */ $cli -> arguments -> addOption ( 'user' , 'u' , Option :: OPTION_REQUIRED , \"Username to log in with.\" ); $cli -> arguments -> parse (); $user = $cli -> arguments -> get ( 'user' ); echo \"You provided username { $user } \\n \" ; } catch ( \\Exception ) { $cli -> arguments -> usage (); } If you run this example without any arguments an Exception will be thrown and the usage screen will be shown to the user of your application. Be aware of default values If you have provided a default value an exception will not be thrown if the option is missing. The default value will be used instead of the value a user would have passed in.","title":"Required options"},{"location":"arguments/operations/","text":"Operations are useful if your application supports more than one default action. Let's say you are building a beautiful FTP client, and you want to give your users the option to upload or download a file from a server. This means you might want some options to be required with one action but maybe not with another action. This is the reason why we have added operations to the mix. Setting and getting of arguments works the same as you would normally use them. In fact if you would set an argument without the use of operations the following code: $cli->arguments->get('user'); would alias the following code internally inside the package. $cli->arguments->getOperation(\"default\")->get('user'); So let's create the scenario I mentioned above in code. <?php use Redbox\\Cli\\Arguments\\Option ; use Redbox\\Cli\\Cli ; $cli = new Cli ; try { /** * This is optional. */ $cli -> setDescription ( \"My awesome ftp client.\" ); $cli -> arguments -> registerOperation ( \"download\" ) -> addOption ( 'user' , 'u' , Option :: OPTION_REQUIRED , \"Username to log in with.\" ) -> addOption ( 'password' , 'p' , Option :: OPTION_REQUIRED , \"Password to login with\" ) -> addOption ( 'remove-file' , 'r' , Option :: OPTION_REQUIRED , \"The file to download.\" ) -> addOption ( 'local-file' , 'f' , Option :: OPTION_REQUIRED , \"Save the file here.\" ); $cli -> arguments -> registerOperation ( \"upload\" ) -> addOption ( 'user' , 'u' , Option :: OPTION_REQUIRED , \"Username to log in with.\" ) -> addOption ( 'password' , 'p' , Option :: OPTION_REQUIRED , \"Password to login with\" ) -> addOption ( 'local-file' , 'f' , Option :: OPTION_REQUIRED , \"The file to upload.\" ); $cli -> arguments -> parse (); } catch ( \\Exception ) { $cli -> arguments -> usage (); }","title":"Operations"},{"location":"badges/","text":"Badges folder.","title":"Index"},{"location":"colors/colors/","text":"If you wish to posh up the output of your application of the command line you now can. Since the release of version 1.5 Redbox-cli now supports colors for the command line (Windows included). Supported colors: red green blue white black yellow magenta cyan Foreground colors \u00b6 The colors above are functions on your CLI instance. You can pass a text with the function but this is not required. Let's have a look at how to write a red text to your command line. <?php $cli -> red ( 'This text is now red' ); $cli -> red () -> write ( 'Alternative method to write red text' ) As you can see the color functions are chainable, so you can mix and match with background colors. Background colors \u00b6 All supported colors have a \"Background\" suffix as well allowing you to use background colors in your text as well. And just like the foreground colors, the background colors are chainable as well. <?php $cli -> redBackground ( 'This background color red.' ); $cli -> redBackground () -> write ( 'Alternative way to get a background color.' ); Mix and Match \u00b6 You can mix and match foreground and background colors to get the desired output. <?php $cli -> red () -> blueBackground ( 'Red text blue background' ); $cli -> red () -> blueBackground () -> write ( 'Alternate: Red text blue background' );","title":"Colors"},{"location":"colors/colors/#foreground-colors","text":"The colors above are functions on your CLI instance. You can pass a text with the function but this is not required. Let's have a look at how to write a red text to your command line. <?php $cli -> red ( 'This text is now red' ); $cli -> red () -> write ( 'Alternative method to write red text' ) As you can see the color functions are chainable, so you can mix and match with background colors.","title":"Foreground colors"},{"location":"colors/colors/#background-colors","text":"All supported colors have a \"Background\" suffix as well allowing you to use background colors in your text as well. And just like the foreground colors, the background colors are chainable as well. <?php $cli -> redBackground ( 'This background color red.' ); $cli -> redBackground () -> write ( 'Alternative way to get a background color.' );","title":"Background colors"},{"location":"colors/colors/#mix-and-match","text":"You can mix and match foreground and background colors to get the desired output. <?php $cli -> red () -> blueBackground ( 'Red text blue background' ); $cli -> red () -> blueBackground () -> write ( 'Alternate: Red text blue background' );","title":"Mix and Match"}]}